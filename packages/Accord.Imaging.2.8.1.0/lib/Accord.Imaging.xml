<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accord.Imaging</name>
    </assembly>
    <members>
        <member name="T:Accord.Imaging.HarrisCornerMeasure">
            <summary>
              Corners measures to be used in <see cref="T:Accord.Imaging.HarrisCornersDetector"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HarrisCornerMeasure.Harris">
            <summary>
              Original Harris measure. Requires the setting of
              a parameter k (default is 0.04), which may be a
              bit arbitrary and introduce more parameters to tune.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HarrisCornerMeasure.Nobel">
            <summary>
              Nobel Harris measure. Does not require a parameter
              and may be more stable.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.HarrisCornersDetector">
             <summary>
               Harris Corners Detector.
             </summary>
             
             <remarks>
             <para>This class implements the Harris corners detector.</para>
             <para>Sample usage:</para>
             
             <code>
             // create corners detector's instance
             HarrisCornersDetector hcd = new HarrisCornersDetector( );
             // process image searching for corners
             Point[] corners = hcd.ProcessImage( image );
             // process points
             foreach ( Point corner in corners )
             {
                 // ... 
             }
             </code>
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                   School of Computer Science and Software Engineering, The University of Western Australia.
                   Available in: http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Spatial/harris.m </description></item>
                 <item><description>
                   C.G. Harris and M.J. Stephens. "A combined corner and edge detector", 
                   Proceedings Fourth Alvey Vision Conference, Manchester.
                   pp 147-151, 1988.</description></item>
                 <item><description>
                   Alison Noble, "Descriptions of Image Surfaces", PhD thesis, Department
                   of Engineering Science, Oxford University 1989, p45.</description></item>
               </list>
             </para>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.MoravecCornersDetector"/>
             <seealso cref="T:AForge.Imaging.SusanCornersDetector"/>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single,System.Single,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single,System.Single,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure,System.Single,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure,System.Single,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.convolve(System.Single[0:,0:],System.Single[0:,0:],System.Single[])">
            <summary>
              Convolution with decomposed 1D kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Measure">
            <summary>
              Gets or sets the measure to use when detecting corners.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.K">
            <summary>
              Harris parameter k. Default value is 0.04.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Threshold">
            <summary>
              Harris threshold. Default value is 20000.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Sigma">
            <summary>
              Gaussian smoothing sigma. Default value is 1.2.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Suppression">
            <summary>
              Non-maximum suppression window radius. Default value is 3.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.PairsMarker">
            <summary>
              Filter to mark (highlight) pairs of points in a image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PairsMarker.#ctor(AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PairsMarker"/> class.
            </summary>
            
            <param name="points1">Set of starting points.</param>
            <param name="points2">Set of corresponding points.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PairsMarker.#ctor(AForge.IntPoint[],AForge.IntPoint[],System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PairsMarker"/> class.
            </summary>
            
            <param name="points1">Set of starting points.</param>
            <param name="points2">Set of corresponding points.</param>
            <param name="markerColor">The color of the lines to be marked.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PairsMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.MarkerColor">
            <summary>
              Color used to mark pairs.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.Points1">
            <summary>
              The first set of points.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.Points2">
            <summary>
              The corresponding points to the first set of points.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.CombineChannel">
            <summary>
              Combine channel filter.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.CombineChannel.#ctor(AForge.Imaging.UnmanagedImage[])">
            <summary>
              Constructs a new CombineChannel filter.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.CombineChannel.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.CombineChannel.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
            <remarks>
              <para>The dictionary defines, which pixel formats are supported for
              source images and which pixel format will be used for resulting image.</para>
            
              <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
              for more information.</para>
            </remarks>
            
        </member>
        <member name="T:Accord.Imaging.BorderFollowing">
            <summary>
              Border following algorithm for contour extraction.
            </summary>
            
            <example>
            <code>
            // Create a new border following algorithm
            BorderFollowing bf = new BorderFollowing();
            
            // Get all points in the contour of the image. 
            List&lt;IntPoint> contour = bf.FindContour(grayscaleImage);
            
            // Mark all points in the contour point list in blue
            new PointsMarker(contour, Color.Blue).ApplyInPlace(image);
            
            // Show the result
            ImageBox.Show(image);
            </code>
            
            <para>
              The resulting image is shown below.</para>
              
            <img src="..\images\border-following.png" /> 
            
            </example>
            
        </member>
        <member name="T:Accord.Imaging.IContourExtractionAlgorithm">
            <summary>
              Common interface for contour extraction algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IContourExtractionAlgorithm.FindContour(System.Drawing.Bitmap)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IContourExtractionAlgorithm.FindContour(System.Drawing.Imaging.BitmapData)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IContourExtractionAlgorithm.FindContour(AForge.Imaging.UnmanagedImage)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.BorderFollowing"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.#ctor(System.Byte)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.BorderFollowing"/> class.
            </summary>
            
            <param name="threshold">The pixel value threshold above which a pixel
            is considered black (belonging to the object). Default is zero.</param>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.FindContour(System.Drawing.Bitmap)">
            <summary>
            Extracts the contour from a single object in a grayscale image.
            </summary>
            
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.FindContour(System.Drawing.Imaging.BitmapData)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            
            <param name="image">A grayscale image.</param>
            
            <returns>
            A list of <see cref="T:AForge.IntPoint"/>s defining a contour.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.FindContour(AForge.Imaging.UnmanagedImage)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="P:Accord.Imaging.BorderFollowing.Threshold">
            <summary>
              Gets or sets the pixel value threshold above which a pixel
              is considered white (belonging to the object). Default is zero.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.BagOfVisualWords">
            <summary>
              Bag of Visual Words
            </summary>
            
            <remarks>
              The bag-of-words (BoW) model can be used to extract finite
              length features from otherwise varying length representations.
              This class uses the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">
              SURF features detector</see> to determine a coded representation
              for a given image.
            </remarks>
            
            <example>
            <code>
              int numberOfWords = 32;
              
              // Create bag-of-words (BoW) with the given number of words
              BagOfVisualWords bow = new BagOfVisualWords(numberOfWords);
              
              // Create the BoW codebook using a set of training images
              bow.Compute(imageArray);
              
              // Create a fixed-length feature vector for a new image
              double[] featureVector = bow.GetFeatureVector(image);
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.#ctor(System.Int32)">
            <summary>
              Constructs a new <see cref="T:Accord.Imaging.BagOfVisualWords"/>.
            </summary>
            
            <param name="numberOfWords">The number of codewords.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.#ctor(Accord.MachineLearning.IClusteringAlgorithm{System.Double[]})">
            <summary>
              Constructs a new <see cref="T:Accord.Imaging.BagOfVisualWords"/>.
            </summary>
            
            <param name="algorithm">The clustering algorithm to use.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.Compute(System.Drawing.Bitmap[],System.Double)">
            <summary>
              Computes the Bag of Words model.
            </summary>
            
            <param name="images">The set of images to initialize the model.</param>
            <param name="threshold">Convergence rate for the k-means algorithm. Default is 1e-5.</param>
            
            <returns>The list of feature points detected in all images.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.GetFeatureVector(System.Drawing.Bitmap)">
            <summary>
              Gets the codeword representation of a given image.
            </summary>
            
            <param name="value">The image to be processed.</param>
            
            <returns>A double vector with the same length as words
            in the code book.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.GetFeatureVector(AForge.Imaging.UnmanagedImage)">
            <summary>
              Gets the codeword representation of a given image.
            </summary>
            
            <param name="value">The image to be processed.</param>
            
            <returns>A double vector with the same length as words
            in the code book.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.GetFeatureVector(System.Collections.Generic.List{Accord.Imaging.SpeededUpRobustFeaturePoint})">
            <summary>
              Gets the codeword representation of a given image.
            </summary>
            
            <param name="points">The interest points of the image.</param>
            
            <returns>A double vector with the same length as words
            in the code book.</returns>
            
        </member>
        <member name="P:Accord.Imaging.BagOfVisualWords.NumberOfWords">
            <summary>
              Gets the number of words in this codebook.
            </summary>
        </member>
        <member name="P:Accord.Imaging.BagOfVisualWords.Clustering">
            <summary>
              Gets the K-Means algorithm used to create this model.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.BagOfVisualWords.Detector">
            <summary>
              Gets the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">SURF</see>
              feature point detector used to identify visual features in images.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Rectification">
            <summary>
              Rectification filter for projective transformation.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.#ctor(Accord.Imaging.MatrixH)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the new image size.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the image filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Rectification.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Rectification.Homography">
            <summary>
              Gets or sets the Homography matrix used to map a image passed to
              the filter to the overlay image specified at filter creation.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Rectification.FillColor">
            <summary>
              Gets or sets the filling color used to fill blank spaces.
            </summary>
            
            <remarks>
              The filling color will only be visible after the image is converted
              to 24bpp. The alpha channel will be used internally by the filter.
            </remarks>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Concatenate">
            <summary>
              Concatenation filter.
            </summary>
            
            <remarks>
              Concatenates two images side by side in a single image.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Concatenate.#ctor(System.Drawing.Bitmap)">
            <summary>
              Creates a new concatenation filter.
            </summary>
            <param name="overlayImage">The first image to concatenate.</param>
        </member>
        <member name="M:Accord.Imaging.Filters.Concatenate.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
              Calculates new image size.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Filters.Concatenate.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Concatenate.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeatureDescriptorType">
            <summary>
              SURF Feature descriptor types.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeatureDescriptorType.None">
            <summary>
              Do not compute descriptors.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeatureDescriptorType.Standard">
            <summary>
              Compute standard descriptors.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeatureDescriptorType.Extended">
            <summary>
              Compute extended descriptors.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">
             <summary>
               Speeded-up Robust Features (SURF) detector.
             </summary>
             
             <remarks>
             <para>
               Based on original implementation in the OpenSURF computer vision library
               by Christopher Evans (http://www.chrisevansdev.com). Used under the LGPL
               with permission of the original author.</para>
               
             <para>
               Be aware that the SURF algorithm is a patented algorithm by Anael Orlinski.
               If you plan to use it in a commercial application, you may have to acquire
               a license from the patent holder.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   E. Christopher. Notes on the OpenSURF Library. Available in: 
                   http://sites.google.com/site/chrisevansdev/files/opensurf.pdf</description></item>
                 <item><description>
                   P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                   School of Computer Science and Software Engineering, The University of Western Australia.
                   Available in: http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Spatial/harris.m</description></item>
               </list>
             </para>
             </remarks>
            
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/> class.
            </summary>
            <param name="threshold">
              The non-maximum suppression threshold. Default is 0.0002f.</param>
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/> class.
            </summary>
            <param name="threshold">
              The non-maximum suppression threshold. Default is 0.0002f.</param>
            <param name="octaves">
              The number of octaves to use when building the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection">
              response filter</see>. Each octave corresponds to a series of maps covering a
              doubling of scale in the image. Default is 5.</param>
            <param name="initial">
              The initial step to use when building the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection">
              response filter</see>. Default is 2. </param>
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.GetDescriptor">
            <summary>
              Gets the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor">
              feature descriptor</see> for the last processed image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.AForge#Imaging#ICornersDetector#ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
            Process image looking for corners.
            </summary>
            <param name="image">Unmanaged source image to process.</param>
            <returns>
            Returns list of found corners (X-Y coordinates).
            </returns>
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.AForge#Imaging#ICornersDetector#ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process image looking for corners.
            </summary>
            <param name="imageData">Source image data to process.</param>
            <returns>
            Returns list of found corners (X-Y coordinates).
            </returns>
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.AForge#Imaging#ICornersDetector#ProcessImage(System.Drawing.Bitmap)">
            <summary>
            Process image looking for corners.
            </summary>
            <param name="image">Source image to process.</param>
            <returns>
            Returns list of found corners (X-Y coordinates).
            </returns>
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ComputeOrientation">
            <summary>
              Gets or sets a value indicating whether all feature points
              should have their orientation computed after being detected.
              Default is true.
            </summary>
            
            <remarks>Computing orientation requires additional processing; 
            set this property to false to compute the orientation of only
            selected points by using the <see cref="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.GetDescriptor">
            current feature descriptor</see> for the last set of detected points.
            </remarks>
            
            <value><c>true</c> if to compute orientation; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ComputeDescriptors">
            <summary>
              Gets or sets a value indicating whether all feature points
              should have their descriptors computed after being detected.
              Default is to compute standard descriptors.
            </summary>
            
            <remarks>Computing descriptors requires additional processing; 
            set this property to false to compute the descriptors of only
            selected points by using the <see cref="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.GetDescriptor">
            current feature descriptor</see> for the last set of detected points.
            </remarks>
            
            <value><c>true</c> if to compute orientation; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.Threshold">
            <summary>
              Gets or sets the non-maximum suppression
              threshold. Default is 0.0002.
            </summary>
            
            <value>The non-maximum suppression threshold.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.Octaves">
            <summary>
              Gets or sets the number of octaves to use when building
              the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection">response filter</see>.
              Each octave corresponds to a series of maps covering a
              doubling of scale in the image. Default is 5.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.Step">
            <summary>
              Gets or sets the initial step to use when building
              the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection">response filter</see>.
              Default is 2.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection">
            <summary>
              Response filter.
            </summary>
            
            <remarks>
            <para>
              In SURF, the scale-space is divided into a number of octaves,
              where an octave refers to a series of <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer"/>
              response maps covering a doubling of scale.</para>
            <para>
              In the traditional approach to constructing a scale-space,
              the image size is varied and the Gaussian filter is repeatedly
              applied to smooth subsequent layers. The SURF approach leaves
              the original image unchanged and varies only the filter size.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates the initial map of responses according to
              the specified number of octaves and initial step.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection.Update(System.Int32,System.Int32,System.Int32)">
            <summary>
              Updates the response filter definitions
              without recreating objects.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection.Compute(AForge.Imaging.IntegralImage)">
            <summary>
              Computes the filter using the specified <see cref="T:AForge.Imaging.IntegralImage">
              Integral Image.</see>
            </summary>
            
            <param name="integral">The integral image.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection.Width">
            <summary>
            Gets the image width used by the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayerCollection.Height">
            <summary>
            Gets the image height used by the filter.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer">
            <summary>
              Response Layer.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Update(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Updates the response layer definitions
              without recreating objects.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Compute(AForge.Imaging.IntegralImage)">
            <summary>
              Computes the filter for the specified integral image.
            </summary>
            
            <param name="image">The integral image.</param>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Width">
            <summary>
              Gets the width of the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Height">
            <summary>
              Gets the height of the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Step">
            <summary>
              Gets the filter step.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Size">
            <summary>
              Gets the filter size.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Responses">
            <summary>
              Gets the responses computed from the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ResponseLayer.Laplacian">
            <summary>
              Gets the Laplacian computed from the filter.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Moments.RawMoments">
            <summary>
              Raw image moments.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Moments.IMoments">
            <summary>
              Common interface for image moments.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.IMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Compute(System.Single[0:,0:],System.Drawing.Rectangle,System.Boolean)">
            <summary>
              Computes the raw moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            <param name="secondOrder"><c>True</c> to compute second order moments, <c>false</c> otherwise.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the raw moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle,System.Boolean)">
            <summary>
              Computes the raw moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            <param name="secondOrder"><c>True</c> to compute second order moments, <c>false</c> otherwise.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Reset">
            <summary>
              Resets all moments to zero.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M00">
            <summary>
              Raw moment of order (0,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M10">
            <summary>
              Raw moment of order (1,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M01">
            <summary>
              Raw moment of order (0,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M11">
            <summary>
              Raw moment of order (1,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M20">
            <summary>
              Raw moment of order (2,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M02">
            <summary>
              Raw moment of order (0,2).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.InvM00">
            <summary>
              Inverse raw moment of order (0,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.CenterX">
            <summary>
              Gets the X centroid of the image.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.CenterY">
            <summary>
              Gets the Y centroid of the image.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.Area">
            <summary>
              Gets the area (for binary images) or sum of
              gray level (for grayscale images).
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.IntegralImage2">
            <summary>
              Joint representation of both Integral Image and Squared Integral Image.
            </summary>
            
            <remarks>
              Using this representation, both structures can be created in a single pass
              over the data. This is interesting for real time applications. This class
              also accepts a channel parameter indicating the Integral Image should be
              computed using a specified color channel. This avoids costly conversions.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image of the given size.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.GetSum(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the pixels in a rectangle of the Integral image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.GetSum2(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the squared pixels in a rectangle of the Integral image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.GetSumT(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the pixels in a tilted rectangle of the Integral image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations 
              before the <see cref="T:Accord.Imaging.IntegralImage2"/> is reclaimed by garbage collection.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Width">
            <summary>
              Gets the image's width.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Height">
            <summary>
              Gets the image's height.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Image">
            <summary>
              Gets the Integral Image for values' sum.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Squared">
            <summary>
              Gets the Integral Image for values' squared sum.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Rotated">
            <summary>
              Gets the Integral Image for tilted values' sum.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.MatrixH">
            <summary>
              Encapsulates a 3-by-3 general transformation matrix
              that represents a (possibly) non-linear transform. 
            </summary>
            
            <remarks>
            <para>
              Linear transformations are not the only ones that can be represented by
              matrices. Using homogeneous coordinates, both affine transformations and
              perspective projections on R^n can be represented as linear transformations
              on R^n+1 (that is, n+1-dimensional real projective space).</para>
            <para>
              The general transformation matrix has 8 degrees of freedom, as the last
              element is just a scale parameter.</para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single[])">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Double[0:,0:])">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single[0:,0:])">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Reset">
            <summary>
              Resets this matrix to be the identity.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Inverse">
            <summary>
              Returns the inverse matrix, if this matrix is invertible.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Transpose">
            <summary>
              Gets the transpose of this transformation matrix.
            </summary>
            
            <returns>The transposed version of this matrix, given by <c>H'</c>.</returns>
        </member>
        <member name="M:Accord.Imaging.MatrixH.TransformPoints(Accord.Imaging.PointH[])">
            <summary>
              Transforms the given points using this transformation matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.TransformPoints(System.Drawing.PointF[])">
            <summary>
              Transforms the given points using this transformation matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Multiply(Accord.Imaging.MatrixH)">
            <summary>
              Multiplies this matrix, returning a new matrix as result.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Equals(System.Object)">
            <summary>
              Compares two objects for equality.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.op_Explicit(Accord.Imaging.MatrixH)~System.Double[0:,0:]">
            <summary>
              Double[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.op_Explicit(Accord.Imaging.MatrixH)~System.Single[0:,0:]">
            <summary>
              Single[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.ToDoubleArray">
            <summary>
              Double[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.ToSingleArray">
            <summary>
              Single[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.op_Multiply(Accord.Imaging.MatrixH,Accord.Imaging.MatrixH)">
            <summary>
              Matrix multiplication.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.Elements">
            <summary>
              Gets the elements of this matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.OffsetX">
            <summary>
              Gets the offset x
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.OffsetY">
            <summary>
              Gets the offset y
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.IsInvertible">
            <summary>
              Gets whether this matrix is invertible.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.IsAffine">
            <summary>
              Gets whether this is an Affine transformation matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.IsIdentity">
            <summary>
              Gets whether this is the identity transformation.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Blend">
            <summary>
              Linear Gradient Blending filter.
            </summary>
            <remarks>
            <para>
              The blending filter is able to blend two images using a homography matrix.
              A linear alpha gradient is used to smooth out differences between the two
              images, effectively blending them in two images. The gradient is computed
              considering the distance between the centers of the two images.</para>
            <para>
              The first image should be passed at the moment of creation of the Blending
              filter as the overlay image. A second image may be projected on top of the
              overlay image by calling the Apply method and passing the second image as
              argument.</para>  
            <para>
              Currently the filter always produces 32bpp images, disregarding the format
              of source images. The alpha layer is used as an intermediate mask in the
              blending process.</para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.#ctor(System.Double[0:,0:],System.Drawing.Bitmap)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            <param name="overlayImage">The overlay image (also called the anchor).</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.#ctor(System.Drawing.Bitmap)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="overlayImage">The overlay image (also called the anchor).</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.#ctor(Accord.Imaging.MatrixH,System.Drawing.Bitmap)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            <param name="overlayImage">The overlay image (also called the anchor).</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the new image size.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the image filter.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Computes a distance metric used to compute the blending mask
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.Homography">
            <summary>
              Gets or sets the Homography matrix used to map a image passed to
              the filter to the overlay image specified at filter creation.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.FillColor">
            <summary>
              Gets or sets the filling color used to fill blank spaces.
            </summary>
            
            <remarks>
              The filling color will only be visible after the image is converted
              to 24bpp. The alpha channel will be used internally by the filter.
            </remarks>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.Gradient">
            <summary>
              Gets or sets a value indicating whether to blend using a linear
              gradient or just superimpose the two images with equal weights.
            </summary>
            
            <value><c>true</c> to create a gradient; otherwise, <c>false</c>. Default is true.</value>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.AlphaOnly">
            <summary>
              Gets or sets a value indicating whether only the alpha channel
              should be blended. This can be used together with a transparency
              mask to selectively blend only portions of the image.
            </summary>
            
            <value><c>true</c> to blend only the alpha channel; otherwise, <c>false</c>. Default is false.</value>
            
        </member>
        <member name="T:Accord.Imaging.Filters.FeaturesMarker">
            <summary>
              Filter to mark (highlight) feature points in a image.
            </summary>
            
            <remarks>
            <para>The filter highlights feature points on the image using a given set of points.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 color images for processing.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.FeaturesMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.#ctor(System.Collections.Generic.IEnumerable{Accord.Imaging.SpeededUpRobustFeaturePoint})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.FeaturesMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.FeaturesMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.FeaturesMarker.Points">
            <summary>
              Gets or sets the set of points to mark.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.PointsMarker">
            <summary>
              Filter to mark (highlight) points in a image.
            </summary>
            
            <remarks>
            <para>The filter highlights points on the image using a given set of points.</para>
            
            <para>The filter accepts 8 bpp grayscale, 24 and 32 bpp color images for processing.</para>
            </remarks>
            
            <example>
            <para>Sample usage:
            <code>
            // Create a blob contour's instance
            BlobCounter bc = new BlobCounter(image);
            
            // Extract blobs
            Blob[] blobs = bc.GetObjectsInformation();
            bc.ExtractBlobsImage(bmp, blobs[0], true);
            
            // Extract blob's edge points
            List&lt;IntPoint&gt; contour = bc.GetBlobsEdgePoints(blobs[0]);
            
            // Create a green, 2 pixel width points marker's instance
            PointsMarker marker = new PointsMarker(contour, Color.Green, 2);
            
            // Apply the filter in a given color image
            marker.ApplyInPlace(colorBlob);
            </code>
            </para>
            </example>
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IEnumerable{AForge.IntPoint})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IEnumerable{AForge.IntPoint},System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IEnumerable{AForge.IntPoint},System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.MarkerColor">
            <summary>
              Color used to mark corners.
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.Points">
            <summary>
              Gets or sets the set of points to mark.
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.Width">
            <summary>
              Gets or sets the width of the points to be drawn.
            </summary>
        </member>
        <member name="T:Accord.Imaging.Tools">
            <summary>
              Static tool functions for imaging.
            </summary>
            
            <remarks>
              <para>
                References:
                <list type="bullet">
                  <item><description>
                    P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                    School of Computer Science and Software Engineering, The University of Western Australia.
                    Available in: <a href="http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m">
                    http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m </a>
                  </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Center(System.Drawing.Rectangle)">
            <summary>
              Computes the center of a given rectangle.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.IsEqual(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Compares two rectangles for equality, considering an acceptance threshold.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Homography(Accord.Imaging.PointH[],Accord.Imaging.PointH[])">
            <summary>
              Creates an homography matrix matching points
              from a set of points to another.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Homography(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Creates an homography matrix matching points
              from a set of points to another.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Fundamental(Accord.Imaging.PointH[],Accord.Imaging.PointH[],Accord.Imaging.PointH[]@)">
            <summary>
              Creates the fundamental matrix between two
              images from a set of points from each image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Fundamental(Accord.Imaging.PointH[],Accord.Imaging.PointH[])">
            <summary>
              Creates the fundamental matrix between two
              images from a set of points from each image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Fundamental(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Creates the fundamental matrix between two
              images from a set of points from each image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(Accord.Imaging.PointH[],Accord.Imaging.MatrixH@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(System.Drawing.PointF[],Accord.Imaging.MatrixH@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(System.Drawing.PointF[],System.Single[0:,0:]@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(Accord.Imaging.PointH[],System.Single[0:,0:]@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Collinear(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
              Detects if three points are collinear.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Collinear(Accord.Imaging.PointH,Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Detects if three points are collinear.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Bitmap)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Imaging.BitmapData)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Bitmap)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Imaging.BitmapData)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Bitmap,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Imaging.BitmapData,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(AForge.Imaging.UnmanagedImage,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Bitmap)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the minimum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the minimum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the minimum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Bitmap)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Imaging.BitmapData,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(AForge.Imaging.UnmanagedImage,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Imaging.BitmapData,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Bitmap,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Imaging.BitmapData,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Byte[0:,0:])">
            <summary>
              Converts an image given as a matrix of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">A matrix containing the grayscale pixel
            values as <see cref="T:System.Double">bytes</see>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of the same width
            and height as the pixel matrix containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Int16[0:,0:])">
            <summary>
              Converts an image given as a matrix of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">A matrix containing the grayscale pixel
            values as <see cref="T:System.Double">bytes</see>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of the same width
            and height as the pixel matrix containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
              Converts an image given as a array of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">An array containing the grayscale pixel
            values as <see cref="T:System.Double">doubles</see>.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="min">The minimum value representing a color value of 0.</param>
            <param name="max">The maximum value representing a color value of 255. </param>
            
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given width and height
            containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Double[][],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
              Converts an image given as a array of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">An jagged array containing the pixel values
            as double arrays. Each element of the arrays will be converted to
            a R, G, B, A value. The bits per pixel of the resulting image
            will be set according to the size of these arrays.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="min">The minimum value representing a color value of 0.</param>
            <param name="max">The maximum value representing a color value of 255. </param>
            
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given width and height
            containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Double[][],System.Int32,System.Int32)">
            <summary>
              Converts an image given as a array of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">An jagged array containing the pixel values
            as double arrays. Each element of the arrays will be converted to
            a R, G, B, A value. The bits per pixel of the resulting image
            will be set according to the size of these arrays.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given width and height
            containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Multiply(System.Drawing.PointF,System.Single[0:,0:])">
            <summary>
              Multiplies a point by a transformation matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Multiply(System.Single[0:,0:],System.Drawing.PointF)">
            <summary>
              Multiplies a transformation matrix and a point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.InnerProduct(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
              Computes the inner product of two points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.TransformPoints(System.Single[0:,0:],System.Drawing.PointF[])">
            <summary>
              Transforms the given points using this transformation matrix.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.CorrelationMatching">
             <summary>
               Maximum cross-correlation feature point matching algorithm.
             </summary>
             
             <remarks>
               <para>
                 This class matches feature points by using a maximum cross-correlation measure.</para>
               <para>
                 References:
                 <list type="bullet">
                   <item><description>
                     P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                     School of Computer Science and Software Engineering, The University of Western Australia.
                     Available in: <a href="http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m">
                     http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m </a>
                   </description></item>
                   <item><description>
                     <a href="http://www.instructor.com.br/unesp2006/premiados/PauloHenrique.pdf">
                     http://www.instructor.com.br/unesp2006/premiados/PauloHenrique.pdf </a>
                   </description></item>
                   <item><description>
                     <a href="http://siddhantahuja.wordpress.com/2010/04/11/correlation-based-similarity-measures-summary/">
                     http://siddhantahuja.wordpress.com/2010/04/11/correlation-based-similarity-measures-summary/ </a>
                   </description></item>
               </list></para>
             </remarks>
            
             <seealso cref="T:Accord.Imaging.RansacHomographyEstimator"/>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.#ctor(System.Int32)">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.Match(System.Drawing.Bitmap,System.Drawing.Bitmap,AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Matches two sets of feature points computed from the given images.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.computeCorrelationMatrix(System.Drawing.Bitmap,AForge.IntPoint[],System.Drawing.Bitmap,AForge.IntPoint[],System.Int32,System.Double)">
            <summary>
              Constructs the correlation matrix between selected points from two images.
            </summary>
            
            <remarks>
              Rows correspond to points from the first image, columns correspond to points
              in the second.
            </remarks>
            
        </member>
        <member name="P:Accord.Imaging.CorrelationMatching.DistanceMax">
            <summary>
              Gets or sets the maximum distance to consider
              points as correlated.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.CorrelationMatching.WindowSize">
            <summary>
              Gets or sets the size of the correlation window.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.ImageToMatrix">
             <summary>
               Bitmap to multidimensional matrix converter.
             </summary>
             
             <remarks>
               This class converts images to multidimensional matrices of
               either double-precision or single-precision floating-point
               values.
             </remarks>
             
             <example>
             <para>
               This example converts a 16x16 Bitmap image into
               a double[,] array with values between 0 and 1.</para>
               
             <code>
             // Obtain an image
             // Bitmap image = ...
            
             // Show on screen
             ImageBox.Show(image, PictureBoxSizeMode.Zoom);
            
             // Create the converter to convert the image to a
             //  matrix containing only values between 0 and 1 
             ImageToMatrix conv = new ImageToMatrix(min: 0, max: 1);
            
             // Convert the image and store it in the matrix
             double[,] matrix; conv.Convert(image, out matrix);
            
             // Show the matrix on screen as an image
             ImageBox.Show(matrix, PictureBoxSizeMode.Zoom);
             </code>
             <para>
               The resulting image is shown below.</para>
             
             <img src="..\images\image-to-matrix.png" />
             
             <para>
               Additionally, the image can also be shown in alternative
               representations such as text or data tables.
             </para>
             
             <code>
             // Show the matrix on screen as a .NET multidimensional array
             MessageBox.Show(matrix.ToString(CSharpMatrixFormatProvider.InvariantCulture));
            
             // Show the matrix on screen as a table
             DataGridBox.Show(matrix, nonBlocking: true)
                 .SetAutoSizeColumns(DataGridViewAutoSizeColumnsMode.Fill)
                 .SetAutoSizeRows(DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders)
                 .SetDefaultFontSize(5)
                .WaitForClose();
             </code>
             
              <para>
               The resulting images are shown below.</para>
               
             <img src="..\images\image-to-matrix-string.png" />
             <img src="..\images\image-to-matrix-table.png" />
             
             </example>
             
        </member>
        <member name="T:Accord.Imaging.Converters.IConverter`2">
            <summary>
              Public interface for image converter algorithms.
            </summary>
            
            <typeparam name="TInput">Input image type.</typeparam>
            <typeparam name="TOutput">Output image type.</typeparam>
            
        </member>
        <member name="M:Accord.Imaging.Converters.IConverter`2.Convert(`0,`1@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToMatrix"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
            <param name="channel">The channel to extract. Default is 0.</param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToMatrix"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToMatrix"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(System.Drawing.Bitmap,System.Double[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(System.Drawing.Bitmap,System.Single[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(AForge.Imaging.UnmanagedImage,System.Double[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(AForge.Imaging.UnmanagedImage,System.Single[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToMatrix.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToMatrix.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToMatrix.Channel">
            <summary>
              Gets or sets the channel to be extracted.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.MatrixToImage">
            <summary>
              Multidimensional array to Bitmap converter.
            </summary>
            
            <remarks>
              This class can convert double and float multidimensional arrays
              (matrices) to Grayscale bitmaps. The color representation of the
              values contained in the matrices must be specified through the 
              Min and Max properties of the class or class constructor.
            </remarks>
            
            <example>
            <para>
              This example converts a multidimensional array of double-precision
              floating-point numbers with values from 0 to 1 into a grayscale image.</para>
              
            <code>
            // Create a matrix representation 
            // of a 4x4 image with a inner 2x2
            // square drawn in the middle
            
            double[,] pixels = 
            {
                 { 0, 0, 0, 0 },
                 { 0, 1, 1, 0 },
                 { 0, 1, 1, 0 },
                 { 0, 0, 0, 0 },
            };
            
            // Create the converter to convert the matrix to a image
            MatrixToImage conv = new MatrixToImage(min: 0, max: 1);
            
            // Declare an image and store the pixels on it
            Bitmap image; conv.Convert(pixels, out image);
            
            // Show the image on screen
            image = new ResizeNearestNeighbor(320, 320).Apply(image);
            ImageBox.Show(image, PictureBoxSizeMode.Zoom);
            </code>
            
            <para>
              The resulting image is shown below.</para>
              
            <img src="..\images\matrix-to-image.png" />
            
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.MatrixToImage"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.MatrixToImage"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Double[0:,0:],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Single[0:,0:],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Double[0:,0:],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Single[0:,0:],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Byte[0:,0:],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Byte[0:,0:],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.MatrixToImage.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.MatrixToImage.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturePoint">
            <summary>
              Speeded-Up Robust Feature (SURF) Point.
            </summary>
            
            <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/>
            <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/> class.
            </summary>
            
            <param name="x">The x-coordinate of the point in the image.</param>
            <param name="y">The y-coordinate of the point in the image.</param>
            <param name="scale">The point's scale.</param>
            <param name="laplacian">The point's laplacian value.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/> class.
            </summary>
            
            <param name="x">The x-coordinate of the point in the image.</param>
            <param name="y">The y-coordinate of the point in the image.</param>
            <param name="scale">The point's scale.</param>
            <param name="laplacian">The point's laplacian value.</param>
            <param name="orientation">The point's origentation angle.</param>
            <param name="response">The point's response value.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/> class.
            </summary>
            
            <param name="x">The x-coordinate of the point in the image.</param>
            <param name="y">The y-coordinate of the point in the image.</param>
            <param name="scale">The point's scale.</param>
            <param name="laplacian">The point's laplacian value.</param>
            <param name="descriptor">The SURF point descriptor.</param>
            <param name="orientation">The point's origentation angle.</param>
            <param name="response">The point's response value.</param>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.X">
            <summary>
              Gets or sets the x-coordinate of this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Y">
            <summary>
              Gets or sets the y-coordinate of this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Scale">
            <summary>
              Gets or sets the scale of the point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Response">
            <summary>
              Gets or sets the response of the detected feature (strength).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Orientation">
            <summary>
              Gets or sets the orientation of this point
              measured anti-clockwise from +ve x-axis.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Laplacian">
            <summary>
              Gets or sets the sign of laplacian for this point
              (which may be useful for fast matching purposes).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Descriptor">
            <summary>
              Gets or sets the descriptor vector
              associated with this point.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.RansacFundamentalEstimator">
            <summary>
              RANSAC Robust Fundamental Matrix Estimator.
            </summary>
            
            <remarks>
            <para>
              Fitting a fundamental using RANSAC is pretty straightforward. Being a iterative method,
              in a single iteration a random sample of four correspondences is selected from the 
              given correspondence points and a transformation F is then computed from those points.</para>
            <para>
              After a given number of iterations, the iteration which produced the largest number
              of inliers is then selected as the best estimation for H.</para>  
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                  School of Computer Science and Software Engineering, The University of Western Australia.
                  Available in: <a href="http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m">
                  http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m </a> </description></item>
                <item><description>
                  E. Dubrofsky. Homography Estimation. Master thesis. Available on:
                  http://www.cs.ubc.ca/~dubroe/courses/MastersEssay.pdf </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new RANSAC homography estimator.
            </summary>
            
            <param name="threshold">Inlier threshold.</param>
            <param name="probability">Inlier probability.</param>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.Estimate(AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.Estimate(AForge.Point[],AForge.Point[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.Estimate(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The fundamental matrix relating x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.fundamental(System.Int32[])">
            <summary>
              Estimates a fundamental matrix with the given points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.distance(System.Single[0:,0:],System.Double)">
            <summary>
              Compute inliers using the Symmetric Transfer Error,
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacFundamentalEstimator.Ransac">
            <summary>
              Gets the RANSAC estimator used.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacFundamentalEstimator.Inliers">
            <summary>
              Gets the final set of inliers detected by RANSAC.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor">
             <summary>
               Speeded-Up Robust Features (SURF) Descriptor.
             </summary>
             
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/>
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.#ctor(AForge.Imaging.IntegralImage)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/> class.
            </summary>
            
            <param name="integralImage">
              The integral image which is the source of the feature points.
            </param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Compute(Accord.Imaging.SpeededUpRobustFeaturePoint)">
            <summary>
              Describes the specified point (i.e. computes and
              sets the orientation and descriptor vector fields
              of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>.
            </summary>
            
            <param name="point">The point to be described.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Compute(System.Collections.Generic.IEnumerable{Accord.Imaging.SpeededUpRobustFeaturePoint})">
            <summary>
              Describes all specified points (i.e. computes and
              sets the orientation and descriptor vector fields
              of each <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>.
            </summary>
            
            <param name="points">The list of points to be described.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.GetOrientation(Accord.Imaging.SpeededUpRobustFeaturePoint)">
            <summary>
              Determine dominant orientation for the feature point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.GetOrientation(System.Int32,System.Int32,System.Int32)">
            <summary>
              Determine dominant orientation for feature point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.GetDescriptor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              Construct descriptor vector for this interest point
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.gaussian(System.Int32,System.Int32,System.Double)">
            <summary>
              Get the value of the gaussian with std dev sigma at the point (x,y)
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.gaussian(System.Double,System.Double,System.Double)">
            <summary>
              Get the value of the gaussian with std dev sigma at the point (x,y)
            </summary>
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.gauss25">
            <summary>
              Gaussian look-up table for sigma = 2.5
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Invariant">
            <summary>
              Gets or sets a value indicating whether the features
              described by this <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/> should
              be invariant to rotation. Default is true.
            </summary>
            
            <value><c>true</c> for rotation invariant features; <c>false</c> otherwise.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Extended">
            <summary>
              Gets or sets a value indicating whether the features
              described by this <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/> should
              be computed in extended form. Default is false.
            </summary>
            
            <value><c>true</c> for extended features; <c>false</c> otherwise.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Image">
            <summary>
              Gets the <see cref="T:AForge.Imaging.IntegralImage"/> of
              the original source's feature detector.
            </summary>
            
            <value>The integral image from where the
            features have been detected.</value>
            
        </member>
        <member name="T:Accord.Imaging.RansacHomographyEstimator">
            <summary>
              RANSAC Robust Homography Matrix Estimator.
            </summary>
            
            <remarks>
            <para>
              Fitting a homography using RANSAC is pretty straightforward. Being a iterative method,
              in a single iteration a random sample of four correspondences is selected from the 
              given correspondence points and a homography H is then computed from those points.</para>
            <para>
              The original points are then transformed using this homography and their distances to
              where those transforms should be is then computed and matching points can classified
              as inliers and non-matching points as outliers.</para>  
            <para>
              After a given number of iterations, the iteration which produced the largest number
              of inliers is then selected as the best estimation for H.</para>  
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  E. Dubrofsky. Homography Estimation. Master thesis. Available on:
                  http://www.cs.ubc.ca/~dubroe/courses/MastersEssay.pdf </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new RANSAC homography estimator.
            </summary>
            
            <param name="threshold">Inlier threshold.</param>
            <param name="probability">Inlier probability.</param>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(AForge.Point[],AForge.Point[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.homography(System.Int32[])">
            <summary>
              Estimates a homography with the given points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.distance(Accord.Imaging.MatrixH,System.Double)">
            <summary>
              Compute inliers using the Symmetric Transfer Error,
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.degenerate(System.Int32[])">
            <summary>
              Checks if the selected points will result in a degenerate homography.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacHomographyEstimator.Ransac">
            <summary>
              Gets the RANSAC estimator used.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacHomographyEstimator.Inliers">
            <summary>
              Gets the final set of inliers detected by RANSAC.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.PointH">
            <summary>
              Represents an ordered pair of real x- and y-coordinates and scalar w that defines
              a point in a two-dimensional plane using homogeneous coordinates.
            </summary>
            
            <remarks>
            <para>
              In mathematics, homogeneous coordinates are a system of coordinates used in
              projective geometry much as Cartesian coordinates are used in Euclidean geometry.</para>
            <para>
              They have the advantage that the coordinates of a point, even those at infinity,
              can be represented using finite coordinates. Often formulas involving homogeneous
              coordinates are simpler and more symmetric than their Cartesian counterparts.</para>
            <para>
              Homogeneous coordinates have a range of applications, including computer graphics,
              where they allow affine transformations and, in general, projective transformations
              to be easily represented by a matrix.</para>
              
            <para>
              References: 
              <list type="bullet">
                <item><description>
                  http://alumnus.caltech.edu/~woody/docs/3dmatrix.html</description></item>
                <item><description>
                  http://simply3d.wordpress.com/2009/05/29/homogeneous-coordinates/</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Single,System.Single)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Single,System.Single,System.Single)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Transform(System.Single[0:,0:])">
            <summary>
              Transforms a point using a projection matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Normalize">
            <summary>
              Normalizes the point to have unit scale.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.ToArray">
            <summary>
              Converts the point to a array representation.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Multiply(Accord.Imaging.PointH,System.Single)">
            <summary>
              Multiplication by scalar.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Multiply(System.Single,Accord.Imaging.PointH)">
            <summary>
              Multiplication by scalar.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Multiply(System.Single)">
            <summary>
              Multiplies the point by a scalar.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Subtraction(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Subtraction.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Subtract(Accord.Imaging.PointH)">
            <summary>
              Subtracts the values of two points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Addition(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Addition.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Add(Accord.Imaging.PointH)">
            <summary>
              Add the values of two points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Equality(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Equality.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Inequality(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Inequality
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Implicit(Accord.Imaging.PointH)~System.Drawing.PointF">
            <summary>
              PointF Conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Ceiling(Accord.Imaging.PointH)">
            <summary>
              Converts to a Integer point by computing the ceiling of the point coordinates. 
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Round(Accord.Imaging.PointH)">
            <summary>
              Converts to a Integer point by rounding the point coordinates. 
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Truncate(Accord.Imaging.PointH)">
            <summary>
              Converts to a Integer point by truncating the point coordinates. 
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Equals(System.Object)">
            <summary>
              Compares two objects for equality.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.PointH.Empty">
            <summary>
              Returns the empty point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.X">
            <summary>
              The first coordinate.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.Y">
            <summary>
              The second coordinate.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.W">
            <summary>
              The inverse scaling factor for X and Y.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.IsNormalized">
            <summary>
              Gets whether this point is normalized (w = 1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.IsAtInfinity">
            <summary>
              Gets whether this point is at infinity (w = 0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.IsEmpty">
            <summary>
              Gets whether this point is at the origin.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.ImageToArray">
            <summary>
              Bitmap to jagged array converter.
            </summary>
            
            <remarks>
              This class converts images to single or jagged arrays of
              either double-precision or single-precision floating-point
              values.
            </remarks>
            
            <example>
            <para>
              This example converts a 16x16 Bitmap image into
              a double[] array with values between 0 and 1.</para>
              
            <code>
            // Obtain a 16x16 bitmap image
            // Bitmap image = ...
            
            // Show on screen
            ImageBox.Show(image, PictureBoxSizeMode.Zoom);
            
            // Create the converter to convert the image to an
            //   array containing only values between 0 and 1 
            ImageToArray conv = new ImageToArray(min: 0, max: 1);
            
            // Convert the image and store it in the array
            double[] array; conv.Convert(image, out array);
            
            // Show the array on screen
            ImageBox.Show(array, 16, 16, PictureBoxSizeMode.Zoom);    /// </code>
            
            <para>
              The resulting image is shown below.</para>
            
            <img src="..\images\image-to-matrix.png" />
            
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToArray"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
            <param name="channel">The channel to extract. Default is 0.</param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToArray"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToArray"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Double[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Single[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Double[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Single[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Double[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Single[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Double[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Single[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToArray.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToArray.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToArray.Channel">
            <summary>
              Gets or sets the channel to be extracted.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.ArrayToImage">
             <summary>
               Jagged array to Bitmap converter.
             </summary>
             
             <remarks>
               This class can convert double and float arrays to either Grayscale
               or color Bitmap images. Color images should be represented as an
               array of pixel values for the final image. The actual dimensions
               of the image should be specified in the class constructor.
             </remarks>
             
             <example>
             <para>
               This example converts a single array of double-precision floating-
               point numbers with values from 0 to 1 into a grayscale image.</para>
               
             <code>
             // Create an array representation 
             // of a 4x4 image with a inner 2x2
             // square drawn in the middle
            
             double[] pixels = 
             {
                 0, 0, 0, 0, 
                 0, 1, 1, 0, 
                 0, 1, 1, 0, 
                 0, 0, 0, 0, 
             };
            
             // Create the converter to create a Bitmap from the array
             ArrayToImage conv = new ArrayToImage(width: 4, height: 4);
            
             // Declare an image and store the pixels on it
             Bitmap image; conv.Convert(pixels, out image);
            
             // Show the image on screen
             image = new ResizeNearestNeighbor(320, 320).Apply(image);
             ImageBox.Show(image, PictureBoxSizeMode.Zoom);
             </code>
             
             <para>
               The resulting image is shown below.</para>
               
             <img src="..\images\matrix-to-image.png" />
             
             </example>
             
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ArrayToImage"/> class.
            </summary>
            
            <param name="width">The width of the image to be created.</param>
            <param name="height">The height of the image to be created.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ArrayToImage"/> class.
            </summary>
            
            <param name="width">The width of the image to be created.</param>
            <param name="height">The height of the image to be created.</param>
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[][],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[][],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[][],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[][],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Height">
            <summary>
              Gets or sets the height of the image
              stored in the double array.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Width">
            <summary>
              Gets or sets the width of the image
              stored in the double array.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.WaveletTransform">
            <summary>
              Wavelet transform filter.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WaveletTransform.#ctor(Accord.Math.Wavelets.IWavelet)">
            <summary>
              Constructs a new Wavelet Transform filter.
            </summary>
            
            <param name="wavelet">A wavelet function.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WaveletTransform.#ctor(Accord.Math.Wavelets.IWavelet,System.Boolean)">
            <summary>
              Constructs a new Wavelet Transform filter.
            </summary>
            
            <param name="wavelet">A wavelet function.</param>
            <param name="backward">True to perform backward transform, false otherwise.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WaveletTransform.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Applies the filter to the image.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.WaveletTransform.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.WaveletTransform.Wavelet">
            <summary>
              Gets or sets the Wavelet function
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.WaveletTransform.Backward">
            <summary>
              Gets or sets whether the filter should be applied forward or backwards.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.RectanglesMarker">
            <summary>
              Filter to mark (highlight) rectangles in a image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="markerColor">The color to use to drawn the rectangles.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Drawing.Rectangle[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="rectangles">Set of rectangles to be drawn.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Rectangle})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="rectangles">Set of rectangles to be drawn.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Rectangle},System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="rectangles">Set of rectangles to be drawn.</param>
            <param name="markerColor">The color to use to drawn the rectangles.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Applies the filter to the image.
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.MarkerColor">
            <summary>
              Color used to mark pairs.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.FillColor">
            <summary>
              Gets or sets the color used to fill
              rectangles. Default is Transparent.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.Rectangles">
            <summary>
              The set of rectangles.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.FastCornersDetector">
             <summary>
               Features from Accelerated Segment Test (FAST) corners detector.
             </summary>
             
             <remarks>
             <para>
               In the FAST corner detection algorithm, a pixel is defined as a corner
               if (in a circle surrounding the pixel), N or more contiguous pixels are
               all significantly brighter then or all significantly darker than the center
               pixel. The ordering of questions used to classify a pixel is learned using
               the ID3 algorithm.
             </para>
             
             <para>This detector has been shown to exibit a high degree of repeatability.</para>
            
             <para>
               The code is roughly based on the 9 valued FAST corner detection
               algorithm implementation in C by Edward Rosten, which has been
               published under a 3-clause BSD license and is freely available at:
               http://svr-www.eng.cam.ac.uk/~er258/work/fast.html. 
             </para>
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   E. Rosten, T. Drummond. Fusing Points and Lines for High
                   Performance Tracking, ICCV 2005. </description></item>
                 <item><description>
                   E. Rosten, T. Drummond. Machine learning for high-speed
                   corner detection, ICCV 2005</description></item>
               </list>
             </para>
             </remarks>
             
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Imaging.FastCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Imaging.FastCornersDetector"/> class.
            </summary>
            <param name="threshold">The threshold.</param>
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.FastCornersDetector.Suppress">
            <summary>
              Gets or sets a value indicating whether non-maximum
              points should be suppressed. Default is true.
            </summary>
            <value><c>true</c> if non-maximum points should
              be suppressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Accord.Imaging.FastCornersDetector.Threshold">
            <summary>
              Gets or sets the corner detection threshold.
              Higher values result in more corners detected
              by the algorithm.
            </summary>
            <value>The corners threshold.</value>
        </member>
        <member name="P:Accord.Imaging.FastCornersDetector.Scores">
            <summary>
              Gets the scores of the each corner detected in
              the previous call to <see cref="M:Accord.Imaging.FastCornersDetector.ProcessImage(System.Drawing.Bitmap)"/>.
            </summary>
            <value>The scores of each last computed corner.</value>
        </member>
        <member name="T:Accord.Imaging.Moments.CentralMoments">
            <summary>
              Central image moments.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(Accord.Imaging.Moments.RawMoments)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
            <param name="moments">The raw moments to construct central moments.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.Compute(Accord.Imaging.Moments.RawMoments)">
            <summary>
              Computes the center moments from the specified raw moments.
            </summary>
            
            <param name="moments">The raw moments to use as base of calculations.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.Compute(System.Single[0:,0:],System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.Compute(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.GetSize">
            <summary>
              Gets the size of the ellipse containing the image.
            </summary>
            
            <returns>The size of the ellipse containing the image.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.GetOrientation">
            <summary>
              Gets the orientation of the ellipse containing the image.
            </summary>
            
            <returns>The angle of orientation of the ellipse, in radians.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.GetSizeAndOrientation(System.Single@)">
            <summary>
              Gets both size and orientation of the ellipse containing the image.
            </summary>
            
            <param name="angle">The angle of orientation of the ellipse, in radians.</param>
            <returns>The size of the ellipse containing the image.</returns>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu00">
            <summary>
              Central moment of order (0,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu10">
            <summary>
              Central moment of order (1,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu01">
            <summary>
              Central moment of order (0,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu11">
            <summary>
              Central moment of order (1,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu20">
            <summary>
              Central moment of order (2,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu02">
            <summary>
              Central moment of order (0,2).
            </summary>
            
        </member>
    </members>
</doc>
