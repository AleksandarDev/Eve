#include <Servo.h>
#include <Wire.h>
#include <Firmata.h>
#include <RF24Network.h>
#include <RF24.h>
#include <SPI.h>
#include <Timer.h>

//
// Firmata 
//
#define I2C_WRITE B00000000
#define I2C_READ B00001000
#define I2C_READ_CONTINUOUSLY B00010000
#define I2C_STOP_READING B00011000
#define I2C_READ_WRITE_MODE_MASK B00011000
#define I2C_10BIT_ADDRESS_MODE_MASK B00100000
#define MAX_QUERIES 8
#define MINIMUM_SAMPLING_INTERVAL 10
#define REGISTER_NOT_SPECIFIED -1

//
// Eve Device
//
#define		DeviceID	1
#define		BaseDevice	0
#define		FirmwareVersion 1
#define		SerialBaud	57600
#define		CommunicationChannel 90

//
// Reserved Pins
//
#define		OnBoardLED	13
#define		RadioCE		48
#define		RadioCSN	49

//
// Commands
//
#define		CommandConnectionRequest		0x0001
#define		CommandConnectionAccepted		0x0002
#define		CommandConnectionDeclined		0x0003
#define		CommandConnectionCheckRequest	0x0004
#define		CommandConnectionCheckConfirm	0x0005


/*******************************************************************************************
 *
 * VARIABLES
 *
 ******************************************************************************************/
//
// Standard Firmata variables
//
// Analog inputs 
int analogInputsToReport = 0; // bitwise array to store pin reporting

// Digital input ports 
byte reportPINs[TOTAL_PORTS];       // 1 = report this port, 0 = silence
byte previousPINs[TOTAL_PORTS];     // previous 8 bits sent

// Pins configuration 
byte pinConfig[TOTAL_PINS];         // configuration of every pin
byte portConfigInputs[TOTAL_PORTS]; // each bit: 1 = pin in INPUT, 0 = anything else
int pinState[TOTAL_PINS];           // any value that has been written

// Timer variables 
unsigned long currentMillis;        // store the current value from millis()
unsigned long previousMillis;       // for comparison with currentMillis
int samplingInterval = 19;          // how often to run the main loop (in ms)

// I2C
struct i2c_device_info {
  byte addr;
  byte reg;
  byte bytes;
};
i2c_device_info query[MAX_QUERIES];
byte i2cRxData[32];
boolean isI2CEnabled = false;
signed char queryIndex = -1;
unsigned int i2cReadDelayTime = 0;  // default delay time between i2c read request and Wire.requestFrom()

// Servos
Servo servos[MAX_SERVOS];

//
// Eve Device Variables
//
RF24 radio(RadioCE, RadioCSN);
RF24Network network(radio);
unsigned int packetsRecieved = 0;
unsigned int packetsSent = 0;
unsigned int lastConnectionCheck;
Timer timer;
bool isConnected = false;


/*******************************************************************************************
 *
 * METHOD DECLARATIONS
 *
 ******************************************************************************************/
// Standard Firmata functions
void ReadAndReportData(byte, int, byte);
void CheckDigitalInputs();
void OutputPort(byte, byte, byte);
void SystemResetCallback();
void EnableI2CPins();
void DisableI2CPins();

// Standard Firmata callback functions
void AnalogWriteCallback(byte, int);
void DigitalWriteCallback(byte, int);
void ReportAnalogCallback(byte, int);
void ReportDigitalCallback(byte, int);
void SetPinModeCallback(byte, int);
void SysexCallback(byte, byte, byte*);

// Eve functions
void UpdateServices();
void BlinkOnBoard(unsigned long);
void SendCommand(unsigned long, unsigned int);
void Solid(uint8_t, uint8_t, uint8_t, int, int, int, int);
void Fade(uint8_t, uint8_t, uint8_t, int, int, int, int, int, int, int);


/*******************************************************************************************
 *
 * METHODS
 *
 ******************************************************************************************/
void setup(void) {
	// Initiate firmata
	Firmata.setFirmwareVersion(FIRMATA_MAJOR_VERSION, FIRMATA_MINOR_VERSION);

	Firmata.attach(ANALOG_MESSAGE, AnalogWriteCallback);
	Firmata.attach(DIGITAL_MESSAGE, DigitalWriteCallback);
	Firmata.attach(REPORT_ANALOG, ReportAnalogCallback);
	Firmata.attach(REPORT_DIGITAL, ReportDigitalCallback);
	Firmata.attach(SET_PIN_MODE, SetPinModeCallback);
	Firmata.attach(START_SYSEX, SysexCallback);
	Firmata.attach(SYSTEM_RESET, SystemResetCallback);
	Firmata.begin(57600);
	SystemResetCallback();  // reset to default config

	// Initiate serial communication
	Serial.begin(SerialBaud);
	Serial.print("NodeDevice firmware version=");
	Serial.println(FirmwareVersion, DEC);
	Serial.println("--------------------");
	
	// Initiate radio communication
	SPI.begin();
	radio.begin();
	network.begin(CommunicationChannel, DeviceID);

	// Setup pins
	pinMode(OnBoardLED, OUTPUT);
}

void loop(void) {
	UpdateServices();

	// Is there anything ready for us?
	while (network.available()) {
		BlinkOnBoard(50);
	}

	Fade(3,5,6, 255,0,0,0,255,0,5000);
	Fade(3,5,6, 0,255,0,0,0,255,5000);
	Fade(3,5,6, 0,0,255,255,0,0,5000);
}

void UpdateServices() {
	network.update();
	timer.update();
}

void BlinkOnBoard(unsigned long t) {
	timer.pulse(OnBoardLED, t, LOW);
}

//function holds RGB values for time t milliseconds
void Solid(uint8_t rPin, uint8_t gPin, uint8_t bPin, int r, int g, int b, int t) {
	//output
	analogWrite(rPin, r);
	analogWrite(gPin, g);
	analogWrite(bPin, b);
  
	//hold at this colour set for t ms
	delay(t);
}

//function fades between two RGB values over fade time period t
//maximum value of fade time = 30 seconds before gradient values
//get too small for floating point math to work? replace floats
//with doubles to remedy this?
void Fade(uint8_t rPin, uint8_t gPin, uint8_t bPin, int r1, int g1, int b1, int r2, int g2, int b2, int t) {
	float r_float1, g_float1, b_float1;
	float r_float2, g_float2, b_float2;
	float grad_r, grad_g, grad_b;
	int output_r, output_g, output_b;
  
	//declare integer RGB values as float values
	r_float1 = (float) r1;
	g_float1 = (float) g1;
	b_float1 = (float) b1;
	r_float2 = (float) r2;
	g_float2 = (float) g2;
	b_float2 = (float) b2;
  
	//calculate rates of change of R, G, and B values
	grad_r = (r_float2-r_float1)/t;
	grad_g = (g_float2-g_float1)/t;
	grad_b = (b_float2-b_float1)/t;
  
	//loop round, incrementing time value "i"
	for ( float i=0; i<=t; i++ ) {
		output_r = r_float1 + grad_r*i;
		output_g = g_float1 + grad_g*i;
		output_b = b_float1 + grad_b*i;
	
		//output
		analogWrite(rPin, (int)output_r);
		analogWrite(gPin, (int)output_g);
		analogWrite(bPin, (int)output_b);
	
		//hold at this colour set for 1ms
		delay(1);
	}
}


/*******************************************************************************************
 *
 * STANDARD FIRMATA METHODS
 *
 ******************************************************************************************/
void ReadAndReportData(byte address, int theRegister, byte numBytes) {
	// Allow I2C requests that don't require a register read
	// for example, some devices using an interrupt pin to signify new data available
	// Do not always require the register read so upon interrupt you call Wire.requestFrom()  
	if (theRegister != REGISTER_NOT_SPECIFIED) {
		Wire.beginTransmission(address);
		Wire.write((byte)theRegister);
		Wire.endTransmission();
		delayMicroseconds(i2cReadDelayTime);  // delay is necessary for some devices such as WiiNunchuck
	} else {
		theRegister = 0;  // fill the register with a dummy value
	}

	Wire.requestFrom(address, numBytes);  // all bytes are returned in requestFrom

	// Check to be sure correct number of bytes were returned by slave
	if(numBytes == Wire.available()) {
		i2cRxData[0] = address;
		i2cRxData[1] = theRegister;
		for (int i = 0; i < numBytes; i++) {
			i2cRxData[2 + i] = Wire.read();
		}
	}
	else {
		if(numBytes > Wire.available())
			Firmata.sendString("I2C Read Error: Too many bytes received");
		else Firmata.sendString("I2C Read Error: Too few bytes received"); 
	}

	// Send slave address, register and received bytes
	Firmata.sendSysex(SYSEX_I2C_REPLY, numBytes + 2, i2cRxData);
}

void CheckDigitalInputs() {
	// Using non-looping code allows constants to be given to readPort().
	// The compiler will apply substantial optimizations if the inputs
	// to readPort() are compile-time constants. 
	if (TOTAL_PORTS > 0 && reportPINs[0]) OutputPort(0, readPort(0, portConfigInputs[0]), false);
	if (TOTAL_PORTS > 1 && reportPINs[1]) OutputPort(1, readPort(1, portConfigInputs[1]), false);
	if (TOTAL_PORTS > 2 && reportPINs[2]) OutputPort(2, readPort(2, portConfigInputs[2]), false);
	if (TOTAL_PORTS > 3 && reportPINs[3]) OutputPort(3, readPort(3, portConfigInputs[3]), false);
	if (TOTAL_PORTS > 4 && reportPINs[4]) OutputPort(4, readPort(4, portConfigInputs[4]), false);
	if (TOTAL_PORTS > 5 && reportPINs[5]) OutputPort(5, readPort(5, portConfigInputs[5]), false);
	if (TOTAL_PORTS > 6 && reportPINs[6]) OutputPort(6, readPort(6, portConfigInputs[6]), false);
	if (TOTAL_PORTS > 7 && reportPINs[7]) OutputPort(7, readPort(7, portConfigInputs[7]), false);
	if (TOTAL_PORTS > 8 && reportPINs[8]) OutputPort(8, readPort(8, portConfigInputs[8]), false);
	if (TOTAL_PORTS > 9 && reportPINs[9]) OutputPort(9, readPort(9, portConfigInputs[9]), false);
	if (TOTAL_PORTS > 10 && reportPINs[10]) OutputPort(10, readPort(10, portConfigInputs[10]), false);
	if (TOTAL_PORTS > 11 && reportPINs[11]) OutputPort(11, readPort(11, portConfigInputs[11]), false);
	if (TOTAL_PORTS > 12 && reportPINs[12]) OutputPort(12, readPort(12, portConfigInputs[12]), false);
	if (TOTAL_PORTS > 13 && reportPINs[13]) OutputPort(13, readPort(13, portConfigInputs[13]), false);
	if (TOTAL_PORTS > 14 && reportPINs[14]) OutputPort(14, readPort(14, portConfigInputs[14]), false);
	if (TOTAL_PORTS > 15 && reportPINs[15]) OutputPort(15, readPort(15, portConfigInputs[15]), false);
}

void OutputPort(byte portNumber, byte portValue, byte forceSend) {
	// pins not configured as INPUT are cleared to zeros
	portValue = portValue & portConfigInputs[portNumber];

	// only send if the value is different than previously sent
	if(forceSend || previousPINs[portNumber] != portValue) {
		Firmata.sendDigitalPort(portNumber, portValue);
		previousPINs[portNumber] = portValue;
	}
}

void EnableI2CPins() {
	byte i;
	// is there a faster way to do this? would probaby require importing 
	// Arduino.h to get SCL and SDA pins
	for (i=0; i < TOTAL_PINS; i++) {
		// mark pins as i2c so they are ignore in non i2c data requests
		if(IS_PIN_I2C(i)) 			
			SetPinModeCallback(i, I2C);
	}
	
	isI2CEnabled = true; 
	
	// is there enough time before the first I2C request to call this here?
	Wire.begin();
}

void DisableI2CPins() {
	isI2CEnabled = false;
	// disable read continuous mode for all devices
	queryIndex = -1;
	// uncomment the following if or when the end() method is added to Wire library
	// Wire.end();
}

// Standard Firmata callback functions
void AnalogWriteCallback(byte pin, int value) {
	if (pin < TOTAL_PINS) {
		switch(pinConfig[pin]) {
			case SERVO:
				if (IS_PIN_SERVO(pin)) {
					servos[PIN_TO_SERVO(pin)].write(value);
					pinState[pin] = value;
				}
				break;
			case PWM:
				if (IS_PIN_PWM(pin)) {
					analogWrite(PIN_TO_PWM(pin), value);
					pinState[pin] = value;
				}
				break;
		}
	}
}

void DigitalWriteCallback(byte port, int value) {
	byte pin, lastPin, mask=1, pinWriteMask=0;

	if (port < TOTAL_PORTS) {
		// create a mask of the pins on this port that are writable.
		lastPin = port*8+8;
		if (lastPin > TOTAL_PINS) lastPin = TOTAL_PINS;
		for (pin=port*8; pin < lastPin; pin++) {
			// do not disturb non-digital pins (eg, Rx & Tx)
			if (IS_PIN_DIGITAL(pin)) {
				// only write to OUTPUT and INPUT (enables pullup)
				// do not touch pins in PWM, ANALOG, SERVO or other modes
				if (pinConfig[pin] == OUTPUT || pinConfig[pin] == INPUT) {
					pinWriteMask |= mask;
					pinState[pin] = ((byte)value & mask) ? 1 : 0;
				}
			}
			mask = mask << 1;
		}
		writePort(port, (byte)value, pinWriteMask);
	}
}

void ReportAnalogCallback(byte analogPin, int value) {
	if (analogPin < TOTAL_ANALOG_PINS) {
		if(value == 0)
			analogInputsToReport = analogInputsToReport &~ (1 << analogPin);
		else analogInputsToReport = analogInputsToReport | (1 << analogPin);
	}
	// TODO: save status to EEPROM here, if changed
}

void ReportDigitalCallback(byte port, int value) {
	if (port < TOTAL_PORTS) {
		reportPINs[port] = (byte)value;
	}
	// do not disable analog reporting on these 8 pins, to allow some
	// pins used for digital, others analog.  Instead, allow both types
	// of reporting to be enabled, but check if the pin is configured
	// as analog when sampling the analog inputs.  Likewise, while
	// scanning digital pins, portConfigInputs will mask off values from any
	// pins configured as analog
}

void SetPinModeCallback(byte pin, int mode) {
	// Disable i2c so pins can be used for other functions
	// the following if statements should reconfigure the pins properly
	if (pinConfig[pin] == I2C && isI2CEnabled && mode != I2C) {
		DisableI2CPins();
	}

	if (IS_PIN_SERVO(pin) && mode != SERVO && servos[PIN_TO_SERVO(pin)].attached())
		servos[PIN_TO_SERVO(pin)].detach();

	if (IS_PIN_ANALOG(pin))
		ReportAnalogCallback(PIN_TO_ANALOG(pin), mode == ANALOG ? 1 : 0); // turn on/off reporting
	
	if (IS_PIN_DIGITAL(pin)) {
		if (mode == INPUT) 
			portConfigInputs[pin/8] |= (1 << (pin & 7));
		else portConfigInputs[pin/8] &= ~(1 << (pin & 7));
	}

	pinState[pin] = 0;
	switch(mode) {
		case ANALOG:
			if (IS_PIN_ANALOG(pin)) {
				if (IS_PIN_DIGITAL(pin)) {
					pinMode(PIN_TO_DIGITAL(pin), INPUT); // disable output driver
					digitalWrite(PIN_TO_DIGITAL(pin), LOW); // disable internal pull-ups
				}
				pinConfig[pin] = ANALOG;
			}
			break;
		case INPUT:
			if (IS_PIN_DIGITAL(pin)) {
				pinMode(PIN_TO_DIGITAL(pin), INPUT); // disable output driver
				digitalWrite(PIN_TO_DIGITAL(pin), LOW); // disable internal pull-ups
				pinConfig[pin] = INPUT;
			}
			break;
		case OUTPUT:
			if (IS_PIN_DIGITAL(pin)) {
				digitalWrite(PIN_TO_DIGITAL(pin), LOW); // disable PWM
				pinMode(PIN_TO_DIGITAL(pin), OUTPUT);
				pinConfig[pin] = OUTPUT;
			}
			break;
		case PWM:
			if (IS_PIN_PWM(pin)) {
				pinMode(PIN_TO_PWM(pin), OUTPUT);
				analogWrite(PIN_TO_PWM(pin), 0);
				pinConfig[pin] = PWM;
			}
			break;
		case SERVO:
			if (IS_PIN_SERVO(pin)) {
				pinConfig[pin] = SERVO;
				if (!servos[PIN_TO_SERVO(pin)].attached())
					servos[PIN_TO_SERVO(pin)].attach(PIN_TO_DIGITAL(pin));
			}
			break;
		case I2C:
			// mark the pin as i2c
			// the user must call I2C_CONFIG to enable I2C for a device
			if (IS_PIN_I2C(pin)) 
				pinConfig[pin] = I2C;
			break;
		default:
			Firmata.sendString("Unknown pin mode"); // TODO: put error msgs in EEPROM
	}

	// TODO: save status to EEPROM here
}

void SysexCallback(byte command, byte argc, byte *argv) {
	byte mode;
	byte slaveAddress;
	byte slaveRegister;
	byte data;
	unsigned int delayTime; 
  
	switch(command) {
		case I2C_REQUEST:
			mode = argv[1] & I2C_READ_WRITE_MODE_MASK;
			if (argv[1] & I2C_10BIT_ADDRESS_MODE_MASK) {
				Firmata.sendString("10-bit addressing mode is not yet supported");
				return;
			}
			else slaveAddress = argv[0];

			switch(mode) {
				case I2C_WRITE:
					Wire.beginTransmission(slaveAddress);
					for (byte i = 2; i < argc; i += 2) {
						data = argv[i] + (argv[i + 1] << 7);
						Wire.write(data);
					}
					Wire.endTransmission();
					delayMicroseconds(70);
					break;
				case I2C_READ:
					if (argc == 6) {
						// a slave register is specified
						slaveRegister = argv[2] + (argv[3] << 7);
						data = argv[4] + (argv[5] << 7);  // bytes to read
						ReadAndReportData(slaveAddress, (int)slaveRegister, data);
					}
					else {
						// a slave register is NOT specified
						data = argv[2] + (argv[3] << 7);  // bytes to read
						ReadAndReportData(slaveAddress, (int)REGISTER_NOT_SPECIFIED, data);
					}
					break;
				case I2C_READ_CONTINUOUSLY:
					if ((queryIndex + 1) >= MAX_QUERIES) {
						// too many queries, just ignore
						Firmata.sendString("too many queries");
						break;
					}

					queryIndex++;
					query[queryIndex].addr = slaveAddress;
					query[queryIndex].reg = argv[2] + (argv[3] << 7);
					query[queryIndex].bytes = argv[4] + (argv[5] << 7);
					break;
				case I2C_STOP_READING:
					byte queryIndexToSkip;      
					// if read continuous mode is enabled for only 1 i2c device, disable
					// read continuous reporting for that device
					if (queryIndex <= 0) {
						queryIndex = -1;        
					} else {
						// if read continuous mode is enabled for multiple devices,
						// determine which device to stop reading and remove it's data from
						// the array, shifiting other array data to fill the space
						for (byte i = 0; i < queryIndex + 1; i++) {
							if (query[i].addr = slaveAddress) {
								queryIndexToSkip = i;
								break;
							}
						}
		
						for (byte i = queryIndexToSkip; i<queryIndex + 1; i++) {
							if (i < MAX_QUERIES) {
								query[i].addr = query[i+1].addr;
								query[i].reg = query[i+1].addr;
								query[i].bytes = query[i+1].bytes; 
							}
						}
						queryIndex--;
					}
					break;
				default:
					break;
			}
			break;
		case I2C_CONFIG:
			delayTime = (argv[0] + (argv[1] << 7));

			if(delayTime > 0)
				i2cReadDelayTime = delayTime;

			if (!isI2CEnabled)
				EnableI2CPins();
	
			break;
		case SERVO_CONFIG:
			if(argc > 4) {
				// these vars are here for clarity, they'll optimized away by the compiler
				byte pin = argv[0];
				int minPulse = argv[1] + (argv[2] << 7);
				int maxPulse = argv[3] + (argv[4] << 7);

				if (IS_PIN_SERVO(pin)) {
					if (servos[PIN_TO_SERVO(pin)].attached())
						servos[PIN_TO_SERVO(pin)].detach();
					servos[PIN_TO_SERVO(pin)].attach(PIN_TO_DIGITAL(pin), minPulse, maxPulse);
					SetPinModeCallback(pin, SERVO);
				}
			}
			break;
		case SAMPLING_INTERVAL:
			if (argc > 1) {
				samplingInterval = argv[0] + (argv[1] << 7);
				if (samplingInterval < MINIMUM_SAMPLING_INTERVAL)
					samplingInterval = MINIMUM_SAMPLING_INTERVAL;
			} else {
				//Firmata.sendString("Not enough data");
			}
			break;
		case EXTENDED_ANALOG:
			if (argc > 1) {
				int val = argv[1];
				if (argc > 2) val |= (argv[2] << 7);
				if (argc > 3) val |= (argv[3] << 14);
				AnalogWriteCallback(argv[0], val);
			}
			break;
		case CAPABILITY_QUERY:
			Serial.write(START_SYSEX);
			Serial.write(CAPABILITY_RESPONSE);
			for (byte pin=0; pin < TOTAL_PINS; pin++) {
				if (IS_PIN_DIGITAL(pin)) {
					Serial.write((byte)INPUT);
					Serial.write(1);
					Serial.write((byte)OUTPUT);
					Serial.write(1);
				}
				if (IS_PIN_ANALOG(pin)) {
					Serial.write(ANALOG);
					Serial.write(10);
				}
				if (IS_PIN_PWM(pin)) {
					Serial.write(PWM);
					Serial.write(8);
				}
				if (IS_PIN_SERVO(pin)) {
					Serial.write(SERVO);
					Serial.write(14);
				}
				if (IS_PIN_I2C(pin)) {
					Serial.write(I2C);
					Serial.write(1);  // to do: determine appropriate value 
				}
				Serial.write(127);
			}
			Serial.write(END_SYSEX);
			break;
		case PIN_STATE_QUERY:
			if (argc > 0) {
				byte pin=argv[0];
				Serial.write(START_SYSEX);
				Serial.write(PIN_STATE_RESPONSE);
				Serial.write(pin);
				if (pin < TOTAL_PINS) {
					Serial.write((byte)pinConfig[pin]);
					Serial.write((byte)pinState[pin] & 0x7F);
					if (pinState[pin] & 0xFF80) Serial.write((byte)(pinState[pin]>> 7) & 0x7F);
					if (pinState[pin] & 0xC000) Serial.write((byte)(pinState[pin] >> 14) & 0x7F);
				}
				Serial.write(END_SYSEX);
			}
			break;
		case ANALOG_MAPPING_QUERY:
			Serial.write(START_SYSEX);
			Serial.write(ANALOG_MAPPING_RESPONSE);
			for (byte pin=0; pin < TOTAL_PINS; pin++) 
				Serial.write(IS_PIN_ANALOG(pin) ? PIN_TO_ANALOG(pin) : 127);
			Serial.write(END_SYSEX);
			break;
	}
}

void SystemResetCallback() {
	// initialize a defalt state
	// TODO: option to load config from EEPROM instead of default
	if (isI2CEnabled) 
		DisableI2CPins();
	
	for (byte i=0; i < TOTAL_PORTS; i++) {
		reportPINs[i] = false;      // by default, reporting off
		portConfigInputs[i] = 0;	// until activated
		previousPINs[i] = 0;
	}
	// pins with analog capability default to analog input
	// otherwise, pins default to digital output
	for (byte i=0; i < TOTAL_PINS; i++) {
		if (IS_PIN_ANALOG(i))		
			SetPinModeCallback(i, ANALOG); // turns off pullup, configures everything
		else SetPinModeCallback(i, OUTPUT); // sets the output to 0, configures portConfigInputs
	}
	// by default, do not report any analog inputs
	analogInputsToReport = 0;

	/* send digital inputs to set the initial state on the host computer,
	* since once in the loop(), this firmware will only send on change */
	/*
	TODO: this can never execute, since no pins default to digital input
	but it will be needed when/if we support EEPROM stored config
	for (byte i=0; i < TOTAL_PORTS; i++) {
	outputPort(i, readPort(i, portConfigInputs[i]), true);
	}
	*/
}
